[
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "config",
          "list",
          "--format=json"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": {
        "compute": {
          "region": "us-central1",
          "zone": "us-central1-a"
        },
        "core": {
          "account": "pmontgom@broadinstitute.org",
          "disable_usage_reporting": "False",
          "project": "broad-achilles"
        }
      }
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "firewall-rules",
          "list",
          "--filter=name=allow-altssh-ingress-from-iap",
          "--format=json",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "allowed": [
            {
              "IPProtocol": "tcp",
              "ports": [
                "3022"
              ]
            }
          ],
          "creationTimestamp": "2023-03-28T18:35:10.085-07:00",
          "description": "",
          "direction": "INGRESS",
          "disabled": false,
          "id": "8513582235659414305",
          "kind": "compute#firewall",
          "logConfig": {
            "enable": false
          },
          "name": "allow-altssh-ingress-from-iap",
          "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
          "priority": 1000,
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/firewalls/allow-altssh-ingress-from-iap",
          "sourceRanges": [
            "35.235.240.0/20"
          ]
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "disks",
          "list",
          "--filter=name=hermit-demo-pd",
          "--zones=us-central1-a",
          "--format=json",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": []
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": []
    }
  ],
  [
    "gcloud",
    {
      "args": [
        [
          "compute",
          "disks",
          "create",
          "hermit-demo-pd",
          "--description=MASKED",
          "--size=50",
          "--zone=us-central1-a",
          "--type=pd-standard",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {
        "timeout": 300
      }
    },
    {
      "returned": null
    }
  ],
  [
    "gcloud",
    {
      "args": [
        [
          "compute",
          "instances",
          "create",
          "hermit-demo",
          "--image-family=cos-stable",
          "--image-project=cos-cloud",
          "--zone=us-central1-a",
          "--machine-type=n2-standard-2",
          "--metadata-from-file=user-data=<#cloud-config\n\nbootcmd:\n- mkfs /dev/sdb\n- shutdown -h now\n        >",
          "--disk=name=hermit-demo-pd,device-name=hermit-demo-pd,auto-delete=no",
          "--zone=us-central1-a",
          "--project=broad-achilles",
          "--service-account=hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com"
        ]
      ],
      "kwargs": {
        "timeout": 300
      }
    },
    {
      "returned": null
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:15:48.498-07:00",
          "deletionProtection": false,
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "10",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "NWyYJ77Gk7A=",
          "id": "5093014609741127227",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:16:00.192-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "-6e5jZ7CRZs=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\n\nbootcmd:\n- mkfs /dev/sdb\n- shutdown -h now\n        "
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "34.121.203.118",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "1hqtIauNsgQ=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.67",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "MIGRATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:15:48.498-07:00",
          "deletionProtection": false,
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "10",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "NWyYJ77Gk7A=",
          "id": "5093014609741127227",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:16:00.192-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "-6e5jZ7CRZs=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\n\nbootcmd:\n- mkfs /dev/sdb\n- shutdown -h now\n        "
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "34.121.203.118",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "1hqtIauNsgQ=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.67",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "MIGRATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:15:48.498-07:00",
          "deletionProtection": false,
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "10",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "NWyYJ77Gk7A=",
          "id": "5093014609741127227",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:16:00.192-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "-6e5jZ7CRZs=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\n\nbootcmd:\n- mkfs /dev/sdb\n- shutdown -h now\n        "
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "34.121.203.118",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "1hqtIauNsgQ=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.67",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "MIGRATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:15:48.498-07:00",
          "deletionProtection": false,
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "10",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "NWyYJ77Gk7A=",
          "id": "5093014609741127227",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:16:00.192-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "-6e5jZ7CRZs=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\n\nbootcmd:\n- mkfs /dev/sdb\n- shutdown -h now\n        "
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "34.121.203.118",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "1hqtIauNsgQ=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.67",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "MIGRATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:15:48.498-07:00",
          "deletionProtection": false,
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "10",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "NWyYJ77Gk7A=",
          "id": "5093014609741127227",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:16:00.192-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "-6e5jZ7CRZs=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\n\nbootcmd:\n- mkfs /dev/sdb\n- shutdown -h now\n        "
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "34.121.203.118",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "1hqtIauNsgQ=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.67",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "MIGRATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:15:48.498-07:00",
          "deletionProtection": false,
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "10",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "NWyYJ77Gk7A=",
          "id": "5093014609741127227",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:16:00.192-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "-6e5jZ7CRZs=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\n\nbootcmd:\n- mkfs /dev/sdb\n- shutdown -h now\n        "
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "34.121.203.118",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "1hqtIauNsgQ=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.67",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "MIGRATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:15:48.498-07:00",
          "deletionProtection": false,
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "10",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "NWyYJ77Gk7A=",
          "id": "5093014609741127227",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:16:00.192-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "-6e5jZ7CRZs=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\n\nbootcmd:\n- mkfs /dev/sdb\n- shutdown -h now\n        "
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "34.121.203.118",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "1hqtIauNsgQ=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.67",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "MIGRATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:15:48.498-07:00",
          "deletionProtection": false,
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "10",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "NWyYJ77Gk7A=",
          "id": "5093014609741127227",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:16:00.192-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "-6e5jZ7CRZs=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\n\nbootcmd:\n- mkfs /dev/sdb\n- shutdown -h now\n        "
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "34.121.203.118",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "1hqtIauNsgQ=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.67",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "MIGRATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:15:48.498-07:00",
          "deletionProtection": false,
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "10",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "NWyYJ77Gk7A=",
          "id": "5093014609741127227",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:16:00.192-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "-6e5jZ7CRZs=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\n\nbootcmd:\n- mkfs /dev/sdb\n- shutdown -h now\n        "
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "34.121.203.118",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "1hqtIauNsgQ=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.67",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "MIGRATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:15:48.498-07:00",
          "deletionProtection": false,
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "10",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "AhcbfHysLGw=",
          "id": "5093014609741127227",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:16:00.192-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "-6e5jZ7CRZs=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\n\nbootcmd:\n- mkfs /dev/sdb\n- shutdown -h now\n        "
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "34.121.203.118",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "1hqtIauNsgQ=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.67",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "MIGRATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "STOPPING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:15:48.498-07:00",
          "deletionProtection": false,
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "10",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "AhcbfHysLGw=",
          "id": "5093014609741127227",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:16:00.192-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "-6e5jZ7CRZs=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\n\nbootcmd:\n- mkfs /dev/sdb\n- shutdown -h now\n        "
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "34.121.203.118",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "1hqtIauNsgQ=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.67",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "MIGRATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "STOPPING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Unknown CPU Platform",
          "creationTimestamp": "2025-03-13T11:15:48.498-07:00",
          "deletionProtection": false,
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "10",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "pSl8f-JtLqc=",
          "id": "5093014609741127227",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:16:00.192-07:00",
          "lastStopTimestamp": "2025-03-13T11:17:02.862-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "-6e5jZ7CRZs=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\n\nbootcmd:\n- mkfs /dev/sdb\n- shutdown -h now\n        "
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "HF3kwKYXYlI=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.67",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "MIGRATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "TERMINATED",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud",
    {
      "args": [
        [
          "compute",
          "instances",
          "delete",
          "hermit-demo",
          "--zone=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": null
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": []
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": []
    }
  ],
  [
    "gcloud",
    {
      "args": [
        [
          "compute",
          "instances",
          "create",
          "hermit-demo",
          "--description=MASKED",
          "--image-family=cos-stable",
          "--image-project=cos-cloud",
          "--maintenance-policy=TERMINATE",
          "--boot-disk-size=55GB",
          "--zone=us-central1-a",
          "--project=broad-achilles",
          "--machine-type=n2-standard-2",
          "--metadata-from-file=user-data=<#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa X'\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n>",
          "--disk=name=hermit-demo-pd,device-name=hermit-demo-pd,auto-delete=no",
          "--scopes=storage-ro,logging-write,monitoring-write,pubsub,service-management,service-control,trace,compute-rw",
          "--service-account=hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com"
        ]
      ],
      "kwargs": {
        "timeout": 300
      }
    },
    {
      "returned": null
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\n",
        "Warning: Permanently added 'compute.8916114357398446019' (ED25519) to the list of known hosts.\r\n"
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n6b22df04d12c: Pull complete\n01dcbecd78e4: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n6b22df04d12c: Pull complete\n01dcbecd78e4: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n6b22df04d12c: Pull complete\n01dcbecd78e4: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n6b22df04d12c: Pull complete\n01dcbecd78e4: Pull complete\n40a3ebe5ad01: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n6b22df04d12c: Pull complete\n01dcbecd78e4: Pull complete\n40a3ebe5ad01: Pull complete\n5fc4c2d637fa: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n6b22df04d12c: Pull complete\n01dcbecd78e4: Pull complete\n40a3ebe5ad01: Pull complete\n5fc4c2d637fa: Pull complete\n9f37869d1686: Pull complete\n0832c10da011: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n6b22df04d12c: Pull complete\n01dcbecd78e4: Pull complete\n40a3ebe5ad01: Pull complete\n5fc4c2d637fa: Pull complete\n9f37869d1686: Pull complete\n0832c10da011: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n6b22df04d12c: Pull complete\n01dcbecd78e4: Pull complete\n40a3ebe5ad01: Pull complete\n5fc4c2d637fa: Pull complete\n9f37869d1686: Pull complete\n0832c10da011: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n6b22df04d12c: Pull complete\n01dcbecd78e4: Pull complete\n40a3ebe5ad01: Pull complete\n5fc4c2d637fa: Pull complete\n9f37869d1686: Pull complete\n0832c10da011: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n6b22df04d12c: Pull complete\n01dcbecd78e4: Pull complete\n40a3ebe5ad01: Pull complete\n5fc4c2d637fa: Pull complete\n9f37869d1686: Pull complete\n0832c10da011: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n6b22df04d12c: Pull complete\n01dcbecd78e4: Pull complete\n40a3ebe5ad01: Pull complete\n5fc4c2d637fa: Pull complete\n9f37869d1686: Pull complete\n0832c10da011: Pull complete\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n6b22df04d12c: Pull complete\n01dcbecd78e4: Pull complete\n40a3ebe5ad01: Pull complete\n5fc4c2d637fa: Pull complete\n9f37869d1686: Pull complete\n0832c10da011: Pull complete\n8792a6636857: Pull complete\nDigest: sha256:52150323a61388610ad57bafb3003d960cff2517ef88f14caa84fea1ed37f308\nStatus: Downloaded newer image for us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n6b22df04d12c: Pull complete\n01dcbecd78e4: Pull complete\n40a3ebe5ad01: Pull complete\n5fc4c2d637fa: Pull complete\n9f37869d1686: Pull complete\n0832c10da011: Pull complete\n8792a6636857: Pull complete\nDigest: sha256:52150323a61388610ad57bafb3003d960cff2517ef88f14caa84fea1ed37f308\nStatus: Downloaded newer image for us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_output",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--project",
          "broad-achilles",
          "--zone",
          "us-central1-a",
          "--tunnel-through-iap",
          "--command",
          "cat /var/log/hermit.log"
        ]
      ],
      "kwargs": {
        "ignore_error": true,
        "retries_on_timeout": 10
      }
    },
    {
      "returned": [
        "Starting cloudinit bootcmd...\nChecking filesystem /dev/disk/by-id/google-hermit-demo-pd\nfsck from util-linux 2.38.1\n/dev/sdb: clean, 11/3276800 files, 218931/13107200 blocks\nFinished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\nMounting /dev/disk/by-id/google-hermit-demo-pd as /mnt/disks/hermit-demo-pd\n+ echo 'initial mount state'\ninitial mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n+ echo 'Setting up ubuntu home directory permissions...'\nSetting up ubuntu home directory permissions...\n+ usermod -u 2000 ubuntu\nusermod: no changes\n+ groupmod -g 2000 ubuntu\n+ chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n+ chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n+ echo 'Mounting home directory into place...'\nMounting home directory into place...\n+ mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n+ chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n+ chmod 0666 /var/run/docker.sock\n+ echo 'Starting up services...'\nStarting up services...\n+ systemctl daemon-reload\n+ systemctl restart docker\n+ systemctl start container-sshd.service\nConfiguring supplied registries....\nAdding config for registries: us-central1-docker.pkg.dev\n/home/cloudservice/.docker/config.json configured to use this credential helper for GCR registries\n+ systemctl start suspend-on-idle.service\n+ echo 'final mount state'\nfinal mount state\n+ mount\n/dev/mapper/vroot on / type ext2 (ro,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=4065520k,nr_inodes=1016380,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=1627624k,nr_inodes=819200,mode=755)\ncgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\ntmpfs on /etc/machine-id type tmpfs (ro,size=1627624k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=415)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /mnt/disks type tmpfs (rw,relatime,size=256k,mode=755)\ndebugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime,gid=605,mode=750)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ntracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)\noverlayfs on /etc type overlay (rw,relatime,lowerdir=/etc,upperdir=/tmp/etc_overlay/etc,workdir=/tmp/etc_overlay/.work,uuid=on)\n/dev/sda8 on /usr/share/oem type ext4 (ro,nosuid,nodev,noexec,relatime)\n/dev/sda1 on /mnt/stateful_partition type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /home type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sda1 on /var type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\ntmpfs on /var/lib/cloud type tmpfs (rw,nosuid,nodev,relatime,size=2048k,mode=755)\n/dev/sda1 on /var/lib/containerd type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/docker type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/google type ext4 (rw,nosuid,nodev,relatime,commit=30)\n/dev/sda1 on /var/lib/toolbox type ext4 (rw,nodev,relatime,commit=30)\n/dev/sda1 on /tmp type ext4 (rw,nosuid,nodev,noexec,relatime,commit=30)\n/dev/sdb on /mnt/disks/hermit-demo-pd type ext4 (rw,relatime)\n/dev/sdb on /home/ubuntu type ext4 (rw,relatime)\n+ echo 'hermit-setup.sh complete'\nhermit-setup.sh complete\nUnable to find image 'us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1' locally\nv1: Pulling from depmap-omics/docker/hermit-dev-env\ndbf6a9befcde: Pulling fs layer\nd6b748fe7fad: Pulling fs layer\n3f6b49d80f24: Pulling fs layer\nf58ce966cd39: Pulling fs layer\n089ba640f011: Pulling fs layer\n6b22df04d12c: Pulling fs layer\n01dcbecd78e4: Pulling fs layer\n40a3ebe5ad01: Pulling fs layer\n5fc4c2d637fa: Pulling fs layer\n9f37869d1686: Pulling fs layer\n0832c10da011: Pulling fs layer\n8792a6636857: Pulling fs layer\n01dcbecd78e4: Waiting\n40a3ebe5ad01: Waiting\n5fc4c2d637fa: Waiting\n9f37869d1686: Waiting\n0832c10da011: Waiting\n8792a6636857: Waiting\n089ba640f011: Waiting\n6b22df04d12c: Waiting\nf58ce966cd39: Waiting\n3f6b49d80f24: Verifying Checksum\n3f6b49d80f24: Download complete\ndbf6a9befcde: Verifying Checksum\ndbf6a9befcde: Download complete\nd6b748fe7fad: Verifying Checksum\nd6b748fe7fad: Download complete\n6b22df04d12c: Verifying Checksum\n6b22df04d12c: Download complete\nf58ce966cd39: Download complete\n089ba640f011: Verifying Checksum\n089ba640f011: Download complete\n01dcbecd78e4: Verifying Checksum\n01dcbecd78e4: Download complete\n9f37869d1686: Verifying Checksum\n9f37869d1686: Download complete\n5fc4c2d637fa: Verifying Checksum\n5fc4c2d637fa: Download complete\n0832c10da011: Verifying Checksum\n0832c10da011: Download complete\n40a3ebe5ad01: Verifying Checksum\n40a3ebe5ad01: Download complete\n8792a6636857: Verifying Checksum\n8792a6636857: Download complete\ndbf6a9befcde: Pull complete\nd6b748fe7fad: Pull complete\n3f6b49d80f24: Pull complete\nf58ce966cd39: Pull complete\n089ba640f011: Pull complete\n6b22df04d12c: Pull complete\n01dcbecd78e4: Pull complete\n40a3ebe5ad01: Pull complete\n5fc4c2d637fa: Pull complete\n9f37869d1686: Pull complete\n0832c10da011: Pull complete\n8792a6636857: Pull complete\nDigest: sha256:52150323a61388610ad57bafb3003d960cff2517ef88f14caa84fea1ed37f308\nStatus: Downloaded newer image for us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\nServer listening on 0.0.0.0 port 3022.\r\nServer listening on :: port 3022.\r\n",
        ""
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud",
    {
      "args": [
        [
          "compute",
          "ssh",
          "hermit-demo",
          "--zone=us-central1-a",
          "--project=broad-achilles",
          "--command",
          "sudo shutdown now"
        ]
      ],
      "kwargs": {
        "timeout": 10
      }
    },
    {
      "returned": null
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "nth3OKICRPw=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "RUNNING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "LotL80eQUC8=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "STOPPING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "LotL80eQUC8=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "STOPPING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "LotL80eQUC8=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "STOPPING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "LotL80eQUC8=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "STOPPING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "LotL80eQUC8=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "STOPPING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Intel Cascade Lake",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "LotL80eQUC8=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "natIP": "35.202.168.250",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "e2Nwg8snz3Q=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "STOPPING",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": [
        {
          "canIpForward": false,
          "cpuPlatform": "Unknown CPU Platform",
          "creationTimestamp": "2025-03-13T11:17:16.995-07:00",
          "deletionProtection": false,
          "description": "hermit v2.1.0 VM started user hermit-test",
          "disks": [
            {
              "architecture": "X86_64",
              "autoDelete": true,
              "boot": true,
              "deviceName": "persistent-disk-0",
              "diskSizeGb": "55",
              "guestOsFeatures": [
                {
                  "type": "GVNIC"
                },
                {
                  "type": "SEV_CAPABLE"
                },
                {
                  "type": "SEV_SNP_CAPABLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE"
                },
                {
                  "type": "IDPF"
                },
                {
                  "type": "UEFI_COMPATIBLE"
                },
                {
                  "type": "SEV_LIVE_MIGRATABLE_V2"
                },
                {
                  "type": "TDX_CAPABLE"
                },
                {
                  "type": "VIRTIO_SCSI_MULTIQUEUE"
                }
              ],
              "index": 0,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "licenses": [
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos"
              ],
              "mode": "READ_WRITE",
              "shieldedInstanceInitialState": {
                "dbs": [
                  {
                    "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                    "fileType": "X509"
                  }
                ],
                "dbxs": [
                  {
                    "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                    "fileType": "X509"
                  },
                  {
                    "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                    "fileType": "X509"
                  }
                ],
                "keks": [
                  {
                    "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                    "fileType": "X509"
                  }
                ],
                "pk": {
                  "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                  "fileType": "X509"
                }
              },
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo",
              "type": "PERSISTENT"
            },
            {
              "autoDelete": false,
              "boot": false,
              "deviceName": "hermit-demo-pd",
              "diskSizeGb": "50",
              "index": 1,
              "interface": "SCSI",
              "kind": "compute#attachedDisk",
              "mode": "READ_WRITE",
              "source": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/disks/hermit-demo-pd",
              "type": "PERSISTENT"
            }
          ],
          "fingerprint": "lnpn-RGjTJI=",
          "id": "8916114357398446019",
          "kind": "compute#instance",
          "labelFingerprint": "42WmSpB8rSM=",
          "lastStartTimestamp": "2025-03-13T11:17:25.424-07:00",
          "lastStopTimestamp": "2025-03-13T11:20:33.371-07:00",
          "machineType": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/machineTypes/n2-standard-2",
          "metadata": {
            "fingerprint": "qUbtAjShh9I=",
            "items": [
              {
                "key": "user-data",
                "value": "#cloud-config\nbootcmd:\n- echo in-bootcmd\n- echo \"Starting cloudinit bootcmd...\" >> /var/log/hermit.log\n- mount\n- umount /tmp\n- mount --bind /var/tmp /tmp\n- echo in-bootcmd-after-tmp-remount\n- mount\n- echo \"Checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- fsck -C 1 -a /dev/disk/by-id/google-hermit-demo-pd >> /var/log/hermit.log\n- echo \"Finished checking filesystem /dev/disk/by-id/google-hermit-demo-pd\" >> /var/log/hermit.log\n- mkdir -p /mnt/disks/hermit-demo-pd\n- echo \"Mounting /dev/disk/by-id/google-hermit-demo-pd\" as /mnt/disks/hermit-demo-pd\n  >> /var/log/hermit.log\n- mount -t ext4 /dev/disk/by-id/google-hermit-demo-pd /mnt/disks/hermit-demo-pd\n- mkdir -p /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\nruncmd:\n- echo in-runcmd\n- bash /home/cloudservice/hermit-setup.sh >> /var/log/hermit.log 2>&1\nusers:\n- name: ubuntu\nwrite_files:\n- content: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaYC3J7bMkK6IbJlDYpDu1KiESCo0a9jOjRNsaMocRz+P6ZF8nByuY75h8b2FgzA3yhL9/jXYkdmeX5FXYdc8mbyAg/uTXm176Eo1TghhwoGyOatoHr4ogBKsHsqpdl+QOukG7S2OyBXXrarGLgBKKSwTtz8dM1gtjR+cFzUZGn1cz7EVrXGiZLAoqtoNPmcG6ro3SHyeofPOMcBMM/HrC04ihJJ3Lfwcv9WRSDmQkUPeo119rPv59r4HHovSFK23oV9C+MPTq1AMcMn7jnUC5v3SLqIFq2icc3sxO52zbgfXuOjBhq5nFAxqHnPiyPDEQiQBiMdafnvNwNPzE6Mq3\n    pmontgom@MBRCF0-08B\n\n    '\n  path: /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n  permissions: '0700'\n- content: \"import subprocess\\nimport re\\nimport time\\nimport argparse\\nimport os\\n\\\n    \\n# cmd to suspend: docker run google/cloud-sdk gcloud compute instances suspend\\\n    \\ {name} --zone {zone}\\n# but needs additional scopes/permissions. Create a service\\\n    \\ account for this? Actually just a broadening the scope looks sufficient\\nimport\\\n    \\ logging\\n\\nlog = logging.getLogger(__name__)\\n\\n\\ndef main():\\n    parser =\\\n    \\ argparse.ArgumentParser()\\n    parser.add_argument(\\\"poll_frequency\\\", type=float)\\n\\\n    \\    parser.add_argument(\\\"activity_timeout\\\", type=float)\\n    parser.add_argument(\\\"\\\n    name\\\")\\n    parser.add_argument(\\\"zone\\\")\\n    parser.add_argument(\\\"project\\\"\\\n    )\\n    parser.add_argument(\\\"port\\\")\\n    args = parser.parse_args()\\n\\n    logging.basicConfig(level=logging.INFO)\\n\\\n    \\n    # fetch docker image at the beginning just to make sure it's successful\\\n    \\ and we don't wait until\\n    # we actually need it.\\n    subprocess.check_call([\\\"\\\n    docker\\\", \\\"pull\\\", \\\"google/cloud-sdk\\\"])\\n\\n    poll(\\n        args.poll_frequency\\\n    \\ * 60,\\n        args.activity_timeout * 60,\\n        args.name,\\n        args.zone,\\n\\\n    \\        args.project,\\n        args.port,\\n    )\\n\\n\\ndef poll(poll_frequency,\\\n    \\ activity_timeout, name, zone, project, port):\\n    suspend_fail_count = 0\\n\\\n    \\    last_bytes_transmitted = None\\n    last_activity = time.time()\\n    while\\\n    \\ True:\\n        bytes_transmitted = get_bytes_transmitted(port)\\n        if last_bytes_transmitted\\\n    \\ != bytes_transmitted:\\n            last_bytes_transmitted = bytes_transmitted\\n\\\n    \\            last_activity = time.time()\\n            log.info(\\\"%s\\\", f\\\"active\\\n    \\ (last_bytes_transmitted={last_bytes_transmitted})\\\")\\n\\n            # reset\\\n    \\ if there's some activity. Only want to count the number of failed suspends since\\\n    \\ we've decided that we're idle\\n            suspend_fail_count = 0\\n        elapsed_since_activity\\\n    \\ = time.time() - last_activity\\n        if elapsed_since_activity > activity_timeout:\\n\\\n    \\            log.info(\\n                \\\"%s\\\",\\n                f\\\"{elapsed_since_activity}\\\n    \\ seconds elapsed since last sign of activity. Suspending...\\\",\\n            )\\n\\\n    \\            successful_suspend = suspend_instance(name, zone, project)\\n    \\\n    \\        log.info(\\n                f\\\"Suspend is over. Waiting for {activity_timeout/60}\\\n    \\ minutes before polling again\\\"\\n            )\\n            time.sleep(activity_timeout)\\n\\\n    \\            # this is likely after the VM has been resumed but ...\\n        \\\n    \\    # it's been observed that the suspend command often reports failure even\\\n    \\ though the vm successfully suspended.\\n            # I don't have a reliable\\\n    \\ way of telling whether it worked or not. (Specificly, it gets a timeout trying\\\n    \\ to read the response\\n            # to the suspend request, because while it\\\n    \\ was\\n            # reading, the VM got suspended. ) In the event that suspend\\\n    \\ _really_ is broken, we want to shutdown as that's\\n            # safer then\\\n    \\ leaving the machine run forever. So, let's go with a heuristic of, if it fails\\\n    \\ repeatedly then shutdown.\\n\\n            if not successful_suspend:\\n      \\\n    \\          log.info(\\n                    \\\"Suspend command reportedly failed\\\n    \\ -- but not sure if that's true. Incrementing fail count\\\"\\n                )\\n\\\n    \\                suspend_fail_count += 1\\n\\n                if suspend_fail_count\\\n    \\ > 10:\\n                    log.info(\\n                        f\\\"suspending\\\n    \\ failed {suspend_fail_count} times. Shutting down as a last resort\\\"\\n      \\\n    \\              )\\n                    _shutdown()\\n\\n            log.info(\\\"Resuming\\\n    \\ polling...\\\")\\n        time.sleep(poll_frequency)\\n\\n\\ndef _shutdown():\\n  \\\n    \\  return_code = subprocess.run([\\\"shutdown\\\", \\\"--poweroff\\\"]).returncode\\n \\\n    \\   log.info(f\\\"return code = {return_code}\\\")\\n\\n\\ndef suspend_instance(name,\\\n    \\ zone, project):\\n    has_ssd = os.path.exists(\\\"/mnt/disks/local-ssd-0\\\")\\n\\\n    \\    cmd = [\\n        \\\"docker\\\",\\n        \\\"run\\\",\\n        \\\"google/cloud-sdk\\\"\\\n    ,\\n        \\\"gcloud\\\",\\n        \\\"compute\\\",\\n        \\\"instances\\\",\\n       \\\n    \\ \\\"suspend\\\",\\n        name,\\n        \\\"--zone\\\",\\n        zone,\\n        \\\"\\\n    --project\\\",\\n        project,\\n    ]\\n\\n    if has_ssd:\\n        cmd.append(\\\"\\\n    --discard-local-ssd=false\\\")\\n\\n    return_code = subprocess.run(cmd).returncode\\n\\\n    \\n    return return_code == 0\\n\\n\\ndef get_bytes_transmitted(port):\\n    output\\\n    \\ = subprocess.check_output([\\\"iptables\\\", \\\"-nvxL\\\", \\\"CONTAINER_SSH\\\"])\\n  \\\n    \\  lines = output.decode(\\\"utf8\\\").split(\\\"\\\\n\\\")\\n\\n    def parse():\\n      \\\n    \\  for line in lines:\\n            if (\\n                f\\\"tcp dpt:{port}\\\" in\\\n    \\ line\\n            ):  # find the line for the rule for traffic on the port\\n\\\n    \\                m = re.match(\\\"\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s+(\\\\\\\\d+)\\\\\\\\s+.\\\", line)\\n\\\n    \\                if m is not None:\\n                    return int(m.group(2))\\n\\\n    \\        return None  # could not find the rule\\n\\n    result = parse()\\n    if\\\n    \\ result is None:\\n        print(f\\\"Could not parse: {output}\\\")\\n    return result\\n\\\n    \\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  path: /home/cloudservice/suspend_on_idle.py\n- content: '\n\n    set -ex\n\n    echo \"initial mount state\"\n\n    mount\n\n    echo \"Setting up ubuntu home directory permissions...\"\n\n    usermod -u 2000 ubuntu\n\n    groupmod -g 2000 ubuntu\n\n    chown 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu\n\n    chmod -R 700 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    chown -R 2000:2000 /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh\n\n    echo \"Mounting home directory into place...\"\n\n    mount --bind /mnt/disks/hermit-demo-pd/home/ubuntu/ /home/ubuntu\n\n    chown ubuntu:ubuntu /mnt/disks/hermit-demo-pd/home/ubuntu/.ssh/authorized_keys\n\n    chmod 0666 /var/run/docker.sock\n\n    echo \"Starting up services...\"\n\n    systemctl daemon-reload\n\n    systemctl restart docker\n\n    systemctl start container-sshd.service\n\n    systemctl start suspend-on-idle.service\n\n    echo \"final mount state\"\n\n    mount\n\n    echo \"hermit-setup.sh complete\"\n\n    '\n  path: /home/cloudservice/hermit-setup.sh\n- content: '\n\n    # Create a chain for tracking traffic to ssh in container\n\n    iptables -N CONTAINER_SSH\n\n    iptables -I INPUT -j CONTAINER_SSH\n\n    iptables -A CONTAINER_SSH -p tcp --dport 3022\n\n    iptables -A INPUT -p tcp --dport 3022 -j ACCEPT\n\n    '\n  path: /home/cloudservice/setup_firewall\n- content: '\n\n    [Unit]\n\n    Description=Configures the host firewall\n\n\n    [Service]\n\n    Type=oneshot\n\n    RemainAfterExit=true\n\n    ExecStart=/bin/sh /home/cloudservice/setup_firewall\n\n    '\n  owner: root\n  path: /etc/systemd/system/config-firewall.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Container which we can connect via ssh\n\n    Wants=gcr-online.target config-firewall.service\n\n    After=gcr-online.target config-firewall.service\n\n\n    [Service]\n\n    Environment=\"HOME=/home/cloudservice\"\n\n    StandardOutput=append:/var/log/hermit.log\n\n    ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-central1-docker.pkg.dev\n\n    ExecStart=/usr/bin/docker run --rm --name=container-sshd --network=host -v /var/run/docker.sock:/var/run/docker.sock\n    -v /tmp:/tmp -v /mnt/disks/hermit-demo-pd/home/ubuntu:/home/ubuntu us-central1-docker.pkg.dev/depmap-omics/docker/hermit-dev-env:v1\n    /usr/sbin/sshd -D -e -p 3022\n\n    ExecStop=/usr/bin/docker stop container-sshd\n\n    ExecStopPost=/usr/bin/docker rm container-sshd\n\n    Restart=always\n\n    '\n  owner: root\n  path: /etc/systemd/system/container-sshd.service\n  permissions: '0644'\n- content: '\n\n    [Unit]\n\n    Description=Suspend when container is detected to be idle\n\n    Wants=gcr-online.target\n\n    After=gcr-online.target\n\n\n    [Service]\n\n    ExecStart=/usr/bin/python /home/cloudservice/suspend_on_idle.py 1 30 hermit-demo\n    us-central1-a broad-achilles 3022\n\n    Restart=always'\n  owner: root\n  path: /etc/systemd/system/suspend-on-idle.service\n  permissions: '0644'\n- content: \"\\n{\\n\\t\\\"live-restore\\\": false,\\n\\t\\\"log-opts\\\": {\\n                \\\"\\\n    tag\\\": \\\"{{.Name}}\\\"\\n        },\\n\\t\\\"storage-driver\\\": \\\"overlay2\\\",\\n\\t\\\"mtu\\\"\\\n    : 1460\\n}\\n\"\n  owner: root\n  path: /etc/docker/daemon.json\n  permissions: '0644'\n"
              }
            ],
            "kind": "compute#metadata"
          },
          "name": "hermit-demo",
          "networkInterfaces": [
            {
              "accessConfigs": [
                {
                  "kind": "compute#accessConfig",
                  "name": "external-nat",
                  "networkTier": "PREMIUM",
                  "type": "ONE_TO_ONE_NAT"
                }
              ],
              "fingerprint": "_6ZSwlSjLN0=",
              "kind": "compute#networkInterface",
              "name": "nic0",
              "network": "https://www.googleapis.com/compute/v1/projects/broad-achilles/global/networks/default",
              "networkIP": "10.240.0.68",
              "stackType": "IPV4_ONLY"
            }
          ],
          "satisfiesPzi": false,
          "scheduling": {
            "automaticRestart": true,
            "onHostMaintenance": "TERMINATE",
            "preemptible": false,
            "provisioningModel": "STANDARD"
          },
          "selfLink": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a/instances/hermit-demo",
          "serviceAccounts": [
            {
              "email": "hermit-nrqacuv537@broad-achilles.iam.gserviceaccount.com",
              "scopes": [
                "https://www.googleapis.com/auth/compute",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/logging.write",
                "https://www.googleapis.com/auth/monitoring.write",
                "https://www.googleapis.com/auth/pubsub",
                "https://www.googleapis.com/auth/service.management.readonly",
                "https://www.googleapis.com/auth/servicecontrol",
                "https://www.googleapis.com/auth/trace.append"
              ]
            }
          ],
          "shieldedInstanceConfig": {
            "enableIntegrityMonitoring": true,
            "enableSecureBoot": false,
            "enableVtpm": true
          },
          "shieldedInstanceIntegrityPolicy": {
            "updateAutoLearnPolicy": true
          },
          "startRestricted": false,
          "status": "TERMINATED",
          "tags": {
            "fingerprint": "42WmSpB8rSM="
          },
          "zone": "https://www.googleapis.com/compute/v1/projects/broad-achilles/zones/us-central1-a"
        }
      ]
    }
  ],
  [
    "gcloud",
    {
      "args": [
        [
          "compute",
          "instances",
          "delete",
          "hermit-demo",
          "--zone=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {
        "timeout": 300
      }
    },
    {
      "returned": null
    }
  ],
  [
    "gcloud_capturing_json_output",
    {
      "args": [
        [
          "compute",
          "instances",
          "list",
          "--filter=name=hermit-demo",
          "--format=json",
          "--zones=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {}
    },
    {
      "returned": []
    }
  ],
  [
    "gcloud",
    {
      "args": [
        [
          "compute",
          "disks",
          "delete",
          "hermit-demo-pd",
          "--zone=us-central1-a",
          "--project=broad-achilles"
        ]
      ],
      "kwargs": {
        "timeout": 300
      }
    },
    {
      "returned": null
    }
  ]
]